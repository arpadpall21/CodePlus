@charset "utf-8";
@import "css files/testCss1.css" screen and (min-width:1000px);
@import url("css files/testCss2.css");


        /* var() */
.var-parent {
    --customBorder: solid 2px cyan;
    height: 25px;
    margin: 10px;
    border: var(--customBorder, solid 1px black);
}
.var-child {
    margin: 10px;
    border: var(--customBorder, solid 1px black);
}
.var-sibling {
    border: var(--customBorder, solid 1px black);
    margin: 10px;
}

        /* calc() fucntion */
[class^=calc]{
    border: 2px double black;
    background-color: orange;
    padding: 10px;
    text-align: center;
    margin: auto;
}
.calc_1{
    width: 100%;        /* fallback */
    width: calc(100% - 180px);
}
.calc_2{
    width: 80%;        /* fallback */
    width: calc(50% + 150px);
}
.calc_3{
    width: 30%;        /* fallback */
    width: calc(100% / 3);
}
.calc_4{
    width: 45%;        /* fallback */
    width: calc(15% * 4);
}
.calc_5{
    width: 20%;        /* fallback */
    width: calc(((10% * 4) / 2) + 135px - 25px);
}

        /* CSS Specificity TEST1 */
#idTarg {
    color: red;
}
p[style="color:red;"] {
    color: green !important;
}
p[id="idTarg"] {
    color: green !important;
}

        /* Specificity addign up TEST */
[class|="par"] {
    border: solid 1px black;
}
    /* Specificity value "0|1|0|0" */        
#idTarget {     
    color: green;
}
    /* Specificity value 0|0|11|1*/
.par-1 .par-2 .par-3 .par-4 .par-5 .par-6 .par-7 .par-8 .par-9 .par-10 .par-11 p  {
    color: red;
}

        /* :not() pseudo-class specificity value TEST */
.not_Spec_Test {
    border: double 3px blue;
}
    /* Specificity value 0|0|2|1 */
.not_Spec_Test p:not(.target) {
    color: red;
}
    /* Specificity value 0|1|1|1 */
.not_Spec_Test p:not(#target) {
    color: green;
}

        /* all property TEST */
#setInitial {
    color: green;
    text-decoration: underline;
    font-weight: bold;
    line-height: 150%;
}
#setInitial {
    all: initial;
}
.parentInherit {
    color: yellow;
    text-decoration: line-through;
    font-weight: 100;
    line-height: 200%;
}
#setInherit {
    color: green;
    text-decoration: underline;
    font-weight: bold;
    line-height: 150%;
}
#setInherit {
    all: inherit;
}
.inheritIt {
    border: 3px groove red;
}
.inheritIt span {
    all: inherit;
}

        /* all:unset; TEST */
.unsetPar {
    color: green;
    border: solid 2px black;
}
.unsetPar span {
    color: red;
    border: dotted 4px red;
}
.unsetPar span {
    all: unset;
}

        /*-- @supports TEST-1 --*/
@supports(color:green) {
    .support1 {
        color: green;
        text-decoration: underline;
        text-decoration-color: red;
    }
}
@supports(unvalidProp: noVal) {
    .support1 {
        font-size: 10rem;
    }
}
    
        /*-- @support with not operator TEST --*/
@supports not (noProp:noVal) {
    .support2 { color: green }
}
@supports not (color: white) {
    .support2 { font-size: 2rem }
}
    
        /*-- @support with and and or operators TEST --*/
@supports (color:yellow) and (color:piros) {
    .support3 { color:green }
}
@supports (color:yellow) or (color:piros) {
    .support3 { font-family: monospace }
}
    
        /*-- @support nested conditons TEST --*/
@supports ((not (pagex:reg)) or (-webkit-animation-delay:2s)) and (break-after:page) {
    .support4 { color: green }
}

      /*-- @layer TEST --*/
@layer high-specific, low-specific;

.layer-parent span {
  color: white;
}

@layer low-specific {
  .layer-parent span {
    background-color: green;
    color: yellow;
  }
}
@layer high-specific {
  .layer-parent > .layer-child > p > span {
    background-color: red;
    color: orange;
  }
}

    /*-- @layer !important TEST --*/
@layer l1, l2;

@layer l1 {
  .layer-important {
    background-color: red !important;
  }
}
@layer l2 {
  .layer-important {
    background-color: green !important;
  }
}
