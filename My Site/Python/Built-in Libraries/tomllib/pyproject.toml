[tool.poetry]
name = "grace-be"
version = "0.1.0"
description = "FastAPI Backend for GRACE (Generalized Reusable (Web)App Composing Engine)"
authors = ["ZDP-AI"]
readme = "README.md"
packages = [
    {include = "src"},
]

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
fastapi = "^0.109.0"
uvicorn = {extras = ["standard"], version = "^0.27.0.post1"}
python-multipart = "^0.0.6"
pandas = "2.1.4"
aiofiles = "^23.2.1"
azure-storage-blob = "^12.19.0"
azureml = "^0.2.7"
python-dotenv = "^1.0.1"
pydantic = "^2.7.1"
pydantic-settings = "^2.0"
pandera = "^0.18.0"
numpy = "<1.24"
pyyaml = "^6.0.2"
pyproject-parser = "^0.11.1"
deepmerge = "^2.0"
pytest-env = "^1.1.5"
vorp = "1.2.3"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
ruff = "^0.4.3"
pytest = "^8.3.3"
httpx = "^0.27.2"
mypy = "^1.12.0"
types-pyyaml = "^6.0.12.20240917"
types-requests = "^2.32.0.20241016"
pandas-stubs = "^2.2.3.241009"
pytest-cov = "^5.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[[tool.poetry.source]]
name = "aimanifold"
url = "https://pkgs.dev.azure.com/ZEISSgroup/ZDP_AIManifold/_packaging/AIManifold/pypi/simple/"
priority = "supplemental"

[[tool.poetry.source]]
name = "aiaccelerator"
url = "https://pkgs.dev.azure.com/ZEISSgroup/ZDP_AIAccelerator/_packaging/AIAcceleratorProject/pypi/simple/"
priority = "supplemental"

[tool.poetry.scripts]
server = "src.server:start"

[tool.ruff]
line-length = 120
exclude = ["data/", 'notebooks/']

[tool.ruff.lint]
extend-select = ["E501"]  # enforce line length

[tool.ruff.lint.flake8-implicit-str-concat]
allow-multiline = true

[tool.mypy]
strict = false
mypy_path = "/src:/test"
ignore_missing_imports = false
disable_error_code = ["call-arg"]

[tool.pytest_env]
USE_TEST_LOCAL_STORAGE = "1"

[tool.commitizen]
name = "cz_customize"
version_provider = "poetry"
update_changelog_on_bump = true
bump_message = "[build]: bump $current_version \u2192 $new_version [skip ci]"

[tool.commitizen.customize]
bump_map = { break = "MAJOR", docs = "PATCH", feat = "MINOR", fix = "PATCH", refactor = "PATCH" }
bump_pattern = "^.*?\\[(break|feat|fix|refactor|docs)\\]?"
change_type_order = [ "break", "feat", "fix", "refactor", "docs" ]
changelog_pattern = "^.*?\\[(break|feat|fix|refactor|docs|build)\\]?"
commit_parser = "^.*?\\[(?P<change_type>break|feat|fix|refactor|docs)\\]\\s(?P<message>.*)?"
schema_pattern = "^.*?\\[(break|feat|fix|refactor|docs|build)\\]?"
